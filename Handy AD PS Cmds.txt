----Connect to Azure AD via Powershell----
Connect-MsolService

----Auto Redirection of default landing OU for newly joined domain computers----
redircmp 'OU=Workstations,OU=Emirates Steel,DC=eisf,DC=co,DC=ae

----check a user's password details----
net user $username								// regular password GPO on domain
Get-ADUserResultantPasswordPolicy $username		// Fine grained password policy

----Get each AD user and all the groups he belongs to----
Get-ADUser -Filter {Enabled -eq $true} | .\getGroups.ps1 | Export-CSV C:\Scripts\UserMembers.csv
Get-ADUser -Filter * | Select Name, SamAccountName, @{n='OU';e={$_.distinguishedname -replace '^.+?,(CN|OU.+)','$1'}} | Export-Csv "C:\Scripts\users.csv" -Encoding "Unicode"

----Get list of all Security Groups a user belongs to----
Get-ADPrincipalGroupMembership $Username | Select Name
Get-ADPrincipalGroupMembership $Username | Select Name | Export-CSV "C:\Scripts\UserMemberships.csv" -NoTypeInformation -Encoding UTF8
Get-ADUser -Identity $Username -Properties memberof | Select-Object -ExpandProperty memberof

----Copy Security Group membership of a user to another----
Get-ADUser -Identity $UserToCopy -Properties memberof | Select-Object -ExpandProperty memberof |  Add-ADGroupMember -Members $UserToPaste

----Get all Domain Controllers in the Domain----
Get-ADDomainController -Filter * | Select-Object name

----Get Primary Domain Controllers (PDC) in the Domain----
Get-ADDomainController -Discover -Domain $FQDN -Service "PrimaryDC"

----Delete an AD User----
Remove-ADuser $identity

----Get all AD Users with employeeID not null, select employeeID emailAddress telephoneNumber and mobile----
Get-ADUser -filter * -Properties employeeID, emailAddress, telephoneNumber, mobile | ? {$_.employeeID -ne $null} | select employeeID, emailAddress, telephoneNumber, mobile | ConvertTo-Csv -Delimiter ~ -NoTypeInformation | % {$_ -replace '"',''} | Out-File SAP_DUMP.csv -fo -en ascii

----Get Azure AD Sync Schedule----
Import-Module ADSync
Get-ADSyncScheduler

----Get all computers in AD----
Get-ADComputer -Filter * -Properties * | Select -Property Name,DNSHostName,Enabled,LastLogonDate |  Export-CSV "C:\\AllComputers.csv" -NoTypeInformation -Encoding UTF8

----Create a Security Group in AD----
New-ADGroup –name “Finance” –groupscope Global
New-ADGroup –name “Finance” –groupscope Global –path “OU=Offices,DC=Contoso,DC=local”

----Get members of a Security Group in AD----
Get-AdGroupMember -identity $SG-Name
Get-AdGroupMember -identity $SG-Name -Recursive | Export-CSV "C:\Scripts\SG_Members.csv" -NoTypeInformation		//to get members of subgroups as well

----Add members to a Security Group in AD----
Add-ADGroupMember -Identity '$SGName' -Members $Alias1, $Alias2, $Alias3, $Alias4

----Add all users in a certain OU to a Security Group in AD----
Get-ADUser -SearchBase "OU=Users, OU=Crisis Support Services, DC=css, DC=local" -Filter * | ForEach-Object {Add-ADGroupMember -Identity ‘VPN Users’ -Members $_ }

----Reset password in AD----
Set-ADAccountPassword $identity -Reset -NewPassword (ConvertTo-SecureString -AsPlainText “$newPassword” -Force -Verbose) -PassThru
Set-ADUser -identity $identity -ChangePasswordAtLogon $true -PasswordNeverExpires $true
Unlock-ADAccount –identity $identity

----Perform an AD-Azure Sync----
Import-Module “C:\Program Files\Microsoft Azure AD Sync\Bin\ADSync\ADSync.ps1”
Start-ADSyncSyncCycle -PolicyType Delta

----Check which DC has flexible single master operations (fsmo) Role----
netdom /query fsmo

----Get all AD-users with mailbox----
Get-ADUser -LDAPFilter "(msExchMailboxGuid=*)" | Export-Csv -NoTypeInformation 'C:\Scripts\mailboxed_users.csv'

----Get all AD-users without mailbox----
Get-ADUser -LDAPFilter "(!msExchMailboxGuid=*)" | Export-Csv -NoTypeInformation 'C:\Scripts\unmailboxed_users.csv'

----Get all AD Distribution Groups----
$Groups = Get-ADGroup -Filter 'groupcategory -eq "distribution"' | Export-Csv -NoTypeInformation 'C:\Scripts\DGGroups.csv'

----Get all AD Security Groups----
$Groups = Get-ADGroup -Filter 'groupcategory -eq "security"' | Export-Csv -NoTypeInformation 'C:\Scripts\SGGroups.csv'

----Run a DC diagnostic----
dcdiag
dcdiag /test:replications	// to test replication

----Get all Server OSs in the envoronment----
Get-ADComputer -Filter {(OperatingSystem -like "*windows*server*") -and (Enabled -eq "True")} -Properties OperatingSystem | Sort Name | select -Unique OperatingSystem

----Get all Server and their respective OSs in the envoronment----
Get-ADComputer -Filter {(OperatingSystem -like "*windows*server*") -and (Enabled -eq "True")} -Properties OperatingSystem | sort OperatingSystem | ft DNSHostName, OperatingSystem

----Get a count of all Server and their respective OSs in the envoronment----
$Servers = Get-ADComputer -Filter {(OperatingSystem -like "*windows*server*") -and (Enabled -eq "True")} -Properties OperatingSystem | Sort Name
$servers | group operatingsystem 

----Check to which email directory synchronization notification are going to----
Connect-MsolService	//connect to Azure AD
Get-MsolCompanyInformation | FL DisplayName, TechnicalNotificationEmails
Set-MsolCompanyContactInformation -TechnicalNotificationEmails "$newEmailAddress"

----Get all users phone numbers----
Get-ADUser -f * -Properties *| where {$_.enabled -eq $true} | ft Name,EmailAddress,*Phone

----Get all Computers----
Get-ADComputer -Filter * -Property * | Select-Object Name, OperatingSystem, OperatingSystemVersion, ipv4Address | Export-CSV C:\Scripts\ADcomputerslist.csv -NoTypeInformation -Encoding UTF8

----Search for a perticular attribute in all AD users----
Get-ADUser -LDAPFilter "($attributeName=$attributeValue)"

----Search for everything except the perticular attribute in all AD users----
Get-ADUser -LDAPFilter "(!$attributeName=$attributeValue)"

----Add memmber to managed senders of a Distribution List synced with AD----
Set-ADObject "$distinguishedNameOfDG" -add @{authorig="$distinguishedNameOfNewMember"}

----Get ACL / Folder Permissions----
get-FolderACL.ps1 -path [-recurse] $folderPath | ConvertTo-Html | Out-File .\outputFileName.html
get-FolderACL.ps1 -path [-recurse] $folderPath | Export-CSV .\outputFileName.csv -noTypeInformation
